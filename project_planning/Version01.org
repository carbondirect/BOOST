#+TITLE: BOOST Working Group Milestones: Draft Data Standard
#+SUBTITLE: Target Release: July 31, 2025
#+DATE: 2025-06-09
#+OPTIONS: toc:nil
#+TODO: TODO(t) DOING | DONE(d)


To support a draft release of the BOOST data standard by the end of July, here's a milestone plan structured around four main phases: scoping, drafting, review, and release preparation. This plan assumes today is June 9 and uses a reverse timeline from a target release date of July 31, 2025.

** Scoping and Alignment (June 10–June 21)
<2025-06-10 Tue>--<2025-06-23 Mon>
:PROPERTIES:
:milestone: phase1-scoping
:priority: critical
:END:

*Goal:* Finalize the scope, use cases, and core architecture of the standard.

*Description:* Establish the foundational elements of the BOOST data standard by defining core entities, relationships, and technical approach. This phase ensures all working group members have a shared understanding of the data model's scope and the technical decisions that will guide implementation.

*** DOING Define core data entities (Organizations, Consignments, Sustainability Info)
DEADLINE: <2025-06-17 Tue>
:PROPERTIES:
:labels: type:schema priority:critical
:assignee: @Mailisyorlik
:END:

Establish the fundamental data objects that represent supply chain participants, biomass transactions, and sustainability characteristics. Define attributes, relationships, and constraints for each entity type to ensure comprehensive coverage of biomass chain of custody requirements.

*Work completed:*
- =drafts/scripts/biomass_coc_schema.json= - Initial JSON schema with basic organization, producer, and recipient structures
- =drafts/TransactionSchema.md= - Harmonized data model identifying key attributes across certification programs
- =drafts/images/IntegratedERD.org= - Textual description of integrated entity relationships from multiple standards

*Status:* Basic entity definitions exist but need expansion to full JSON-LD/YAML-LD schemas with complete attribute coverage.


*** DOING Create entity relationship diagram for biomass CoC data model
DEADLINE: <2025-06-17 Tue>
:PROPERTIES:
:labels: type:documentation priority:critical
:assignee: @pwt-cd
:END:

Develop visual representation of how data entities relate to each other in the biomass supply chain. Include cardinalities, dependencies, and data flow patterns to guide schema design and ensure logical consistency across the standard.

*Work completed:*
- =drafts/images/IntegratedERD.org= - Comprehensive textual ERD integrating SBP, RSB, FSC, and ISO standards
- =drafts/images/RSB_ERD.org= - RSB-specific entity relationship documentation
- =drafts/images/ERD.org= - General ERD framework file
- =drafts/images/boost_integrated_erd_mermaid.svg= - Visual diagram in Mermaid format

*Status:* Complete ERD documentation exists covering all major certification schemes and biomass CoC requirements.

*** DOING Define biomass categories (Category 1-5) and classification criteria
DEADLINE: <2025-06-17 Tue>
:PROPERTIES:
:labels: type:schema priority:high
:assignee: @Mailisyorlik
:END:

Specify the biomass categorization system based on source and risk level as defined in guidance documents. Establish clear criteria for classifying biomass types and associated data requirements for each category.

*Work completed:*
- =BOOST_Charter.org= - Defines biomass categories (Category 1-5) based on source and type requirements
- =drafts/images/IntegratedERD.org= - Includes biomass category definitions and classification attributes
- =drafts/TransactionSchema.md= - Documents biomass type attributes across certification programs

*Status:* Biomass categorization framework is established with clear criteria for each category level.

*** DOING Document GHG calculation data requirements (SAR, SREG report types)
DEADLINE: <2025-06-17 Tue>
:PROPERTIES:
:labels: type:documentation priority:high
:assignee: @team:carbondirect
:END:

Define data points needed for greenhouse gas emission calculations including energy content, carbon data, and specific reporting requirements. Align with California LCFS and SBP methodologies for emissions tracking.

*Work completed:*
- =BOOST_Charter.org= - Specifies GHG emission calculation data requirements including SAR and SREG report types
- =drafts/TransactionSchema.md= - Documents GHG-related attributes (energy content, carbon data, compliance periods)
- =drafts/scripts/boost_example_payload.json= - Example payload including GHG calculation fields

*Status:* GHG calculation data requirements are documented with alignment to LCFS and regulatory reporting needs.

*** DOING Settle on JSON-LD/YAML-LD as serialization formats with schema structure principles
DEADLINE: <2025-06-17 Tue>
:PROPERTIES:
:labels: type:process priority:critical
:assignee: @team:technical
:END:

Establish technical architecture decisions including data format, schema validation approach, extensibility patterns, and linked data principles. Define how the standard will support interoperability and future enhancements.

*Work completed:*
- =drafts/sample_payloads/validation_schema_example.json= - JSON schema validation example demonstrating format decisions
- =project_planning/Version01.org= - Comprehensive project structure with JSON-LD/YAML-LD approach documented

*Status:* Technical architecture decisions finalized with JSON-LD/YAML-LD as primary serialization formats.

*** DOING Create documentation template and structure for v0.1 specification
DEADLINE: <2025-06-21 Sat>
:PROPERTIES:
:labels: type:documentation priority:high
:assignee: @pwt-cd
:END:

*Work completed:*
- =drafts/BOOST_standard.tex= - LaTeX template for formal specification document
- =drafts/main.tex= - Main document structure with sections and formatting
- =README.md= - Repository structure and contribution guidelines
- =project_planning/Version01.org= - Milestone and task planning structure

*Status:* Documentation framework and templates are established for collaborative specification development.

*** DOING Assign section ownership to working group members
DEADLINE: <2025-06-21 Sat>
:PROPERTIES:
:labels: type:process priority:medium
:assignee: @pwt-cd
:END:

*Work completed:*
- =meetings/kickoff_meeting.md= - Working group member roles and responsibilities defined
- =project_planning/Version01.org= - Task assignments with @team:technical, @team:carbondirect, @pwt-cd designations
- =BOOST_Charter.org= - Chair responsibilities and Carbon Direct team member roles specified

*Status:* Section ownership and team responsibilities are clearly defined with specific assignees for each work area.

*** DONE Establish GitHub workflow for collaborative drafting
DEADLINE: <2025-06-12 Thu>
:PROPERTIES:
:labels: type:process priority:high
:assignee: @team:technical
:END:

*Work completed:*
- =CONTRIBUTING.md= - Contribution guidelines and workflow procedures
- =CODE_OF_CONDUCT.md= - Community standards and behavior expectations
- =LICENSE.md= - Licensing framework for contributions
- =.github/= - Repository structure for issue templates and workflows
- =w3c.json= - W3C Community Group integration configuration

*Status:* Complete GitHub collaboration framework is operational with clear contribution processes and community guidelines.

*** TODO Review milestones and feedback collection process
DEADLINE: <2025-06-11 Wed>
:PROPERTIES:
:labels: type:process priority:medium
:assignee: @bcabiyo
:END:

*Work completed:*
- =project_planning/Version01.org= - Comprehensive milestone structure with 4 phases and clear review processes
- =meetings/meeting_6_11_25.md= - Structured meeting agenda for milestone review and decision making
- =CONTRIBUTING.md= - Contribution guidelines establishing feedback mechanisms

*Status:* Review milestones defined with structured 4-phase approach and feedback collection system operational.

** Drafting the Standard (June 24–July 12)
DEADLINE: <2025-07-12 Sat>

:PROPERTIES:
:milestone: phase2-drafting
:priority: critical
:END:

*Goal:* Produce a complete, working draft of the data standard.

*Description:* Transform the conceptual data model into concrete JSON-LD/YAML-LD schemas with validation rules, sample data, and reference implementations. Focus on creating interoperable, machine-readable specifications that support real-world biomass tracking use cases.

*** DOING Draft JSON-LD/YAML-LD schema for Organization entities with roles and scope
DEADLINE: <2025-06-28 Sat>
:PROPERTIES:
:labels: type:schema priority:critical
:assignee: @team:technical
:END:

Create machine-readable schemas defining organizations in the biomass supply chain including producers, processors, traders, and end users. Include roles, legal identifiers, certification status, and operational scope for comprehensive entity representation.

*Work completed:*
- =drafts/scripts/biomass_coc_schema.json= - Basic organization schema with name, address, role, and certification fields
- =drafts/images/IntegratedERD.org= - Organization entity attributes including roles, scope, and certification details
- =drafts/TransactionSchema.md= - Organization-related data elements across multiple certification programs
- =drafts/sample_payloads/validation_schema_example.json= - Enhanced validation schema with organization entity patterns

*Status:* Organization schema development progressing with validation examples and structured development approach in place.

*** DOING Draft JSON-LD/YAML-LD schema for Consignment transactions (incoming/outgoing)
DEADLINE: <2025-06-28 Sat>
:PROPERTIES:
:labels: type:schema priority:critical
:assignee: @team:technical
:END:

Define schema for biomass transfer transactions including quantities, dates, sustainability claims, documentation references, and chain of custody linkages. Support both incoming and outgoing consignments with full traceability data.

*Work completed:*
- =drafts/scripts/biomass_coc_schema.json= - Initial transaction schema framework with transfer structures
- =drafts/sample_payloads/validation_schema_example.json= - Validation patterns for consignment data
- =drafts/TransactionSchema.md= - Comprehensive transaction data model across certification programs

*Status:* Consignment transaction schema development underway with initial structures and validation patterns established.

*** DOING Draft JSON-LD/YAML-LD schema for Sustainability Information and claims
DEADLINE: <2025-06-28 Sat>
:PROPERTIES:
:labels: type:schema priority:critical
:assignee: @team:carbondirect
:END:

Create schemas for sustainability characteristics including certification claims, environmental data, source information, and compliance status. Link claims to specific consignments and enable claim verification and transfer mechanisms.

*Work completed:*
- =BOOST_Charter.org= - Sustainability criteria and certification scheme requirements defined
- =drafts/scripts/biomass_coc_schema.json= - Initial sustainability information schema structures
- =drafts/sample_payloads/validation_schema_example.json= - Validation patterns for sustainability claims
- =drafts/images/IntegratedERD.org= - Sustainability information entity relationships documented

*Status:* Sustainability information schema development in progress with charter requirements and initial structures established.

*** TODO Draft Mass Balance Account tracking data structures
DEADLINE: <2025-06-28 Sat>
:PROPERTIES:
:labels: type:schema priority:high
:assignee: @team:technical
:END:

Define data structures for tracking volume balances and sustainability claims within organizations. Include account transactions, credit/debit tracking, claim allocation mechanisms, and reconciliation processes for managing certified vs controlled biomass volumes.

*** TODO Create certification scheme integration patterns (FSC, PEFC, SBP)
DEADLINE: <2025-06-28 Sat>
:PROPERTIES:
:labels: type:integration priority:high
:assignee: @team:carbondirect
:END:

*** TODO Merge individual schemas into unified JSON-LD/YAML-LD context document
DEADLINE: <2025-07-03 Thu>
:PROPERTIES:
:labels: type:schema priority:critical
:assignee: @team:technical
:END:

Integrate all individual entity schemas into a cohesive linked data context document. Ensure consistent naming conventions, resolve conflicts, and establish proper semantic relationships between all data elements for system interoperability.

*** TODO Validate schema relationships and identify missing links
DEADLINE: <2025-07-03 Thu>
:PROPERTIES:
:labels: type:validation priority:high
:assignee: @team:technical
:END:

*** TODO Create sample data instances for each major entity type
DEADLINE: <2025-07-03 Thu>
:PROPERTIES:
:labels: type:documentation priority:high
:assignee: @team:carbondirect
:END:

*** TODO Document known issues and gaps for resolution
DEADLINE: <2025-07-03 Thu>
:PROPERTIES:
:labels: type:documentation priority:medium
:assignee: @pwt-cd
:END:

*** TODO Add comprehensive definitions and terminology section
DEADLINE: <2025-07-12 Sat>
:PROPERTIES:
:labels: type:documentation priority:critical
:assignee: @team:carbondirect
:END:

Develop comprehensive glossary and terminology section defining all technical terms, biomass categories, sustainability concepts, and data relationships. Ensure alignment with existing standards and regulations for consistent interpretation.

*** TODO Create metadata requirements for versioning and provenance
DEADLINE: <2025-07-12 Sat>
:PROPERTIES:
:labels: type:schema priority:high
:assignee: @team:technical
:END:

*** TODO Develop reference implementation examples in Python/JavaScript
DEADLINE: <2025-07-12 Sat>
:PROPERTIES:
:labels: type:validation priority:high
:assignee: @team:technical
:END:

*** TODO Build validation rules and constraints for data integrity
DEADLINE: <2025-07-12 Sat>
:PROPERTIES:
:labels: type:validation priority:high
:assignee: @team:technical
:END:

*** TODO Document California LCFS compliance mapping
DEADLINE: <2025-07-12 Sat>
:PROPERTIES:
:labels: type:integration priority:critical
:assignee: @team:carbondirect
:END:

Create detailed mapping between BOOST data elements and California Low Carbon Fuel Standard requirements. Document how the standard supports LCFS reporting, verification, and compliance processes for biomass fuel pathways.



** Community Review and Refinement (July 15–25)
DEADLINE: <2025-07-25 Fri>
:PROPERTIES:
:milestone: phase3-review
:priority: critical
:END:

*Goal:* Validate the draft through testing and community feedback.

*Description:* Conduct comprehensive community review of the draft standard through structured feedback collection, use case validation, and compatibility testing. Refine the specification based on stakeholder input to ensure practical applicability and adoption readiness.

*** TODO Publish draft v0.0 to GitHub repository with documentation
DEADLINE: <2025-07-15 Tue>
:PROPERTIES:
:labels: type:process priority:critical
:assignee: @pwt-cd
:END:

Release the complete draft v0.0 specification to the public GitHub repository with full documentation, examples, and usage guidelines. Ensure all schemas, validation rules, and reference materials are accessible for community review.

*** TODO Create structured feedback template for GitHub issues
DEADLINE: <2025-07-15 Tue>
:PROPERTIES:
:labels: type:process priority:high
:assignee: @team:technical
:END:

*** TODO Distribute review requests to working group and stakeholders
DEADLINE: <2025-07-18 Fri>
:PROPERTIES:
:labels: type:review priority:critical
:assignee: @pwt-cd
:END:

Coordinate distribution of review requests to all working group members, California agencies, certification bodies, and industry stakeholders. Provide structured review guidelines and feedback collection templates for comprehensive evaluation.

*** TODO Host community review session for live Q&A and feedback
DEADLINE: <2025-07-18 Fri>
:PROPERTIES:
:labels: type:review priority:high
:assignee: @pwt-cd
:END:

*** TODO Collect and categorize all feedback by priority and impact
DEADLINE: <2025-07-18 Fri>
:PROPERTIES:
:labels: type:review priority:high
:assignee: @team:carbondirect
:END:

*** TODO Address critical feedback items that affect core functionality
DEADLINE: <2025-07-25 Fri>
:PROPERTIES:
:labels: type:validation priority:critical
:assignee: @team:technical
:END:

Implement changes to address critical feedback that impacts core data model functionality, schema structure, or interoperability. Prioritize fixes that affect system integration, validation logic, or compliance requirements for v0.1 release readiness.

*** TODO Test schema validation against California biomass use cases
DEADLINE: <2025-07-25 Fri>
:PROPERTIES:
:labels: type:validation priority:critical
:assignee: @team:carbondirect
:END:

Validate schema functionality using real California biomass supply chain scenarios including forestry residues, agricultural waste, and energy crops. Test data completeness, validation rules, and compliance reporting capabilities against actual use cases.

*** TODO Validate SBP Data Transfer System compatibility
DEADLINE: <2025-07-25 Fri>
:PROPERTIES:
:labels: type:integration priority:high
:assignee: @team:technical
:END:

*** TODO Update documentation based on usability feedback
DEADLINE: <2025-07-25 Fri>
:PROPERTIES:
:labels: type:documentation priority:high
:assignee: @team:carbondirect
:END:

*** TODO Create migration guide for existing systems
DEADLINE: <2025-07-25 Fri>
:PROPERTIES:
:labels: type:documentation priority:medium
:assignee: @team:technical
:END:

** Release Preparation and Publication (July 28–31)
DEADLINE: <2025-07-31 Thu>
:PROPERTIES:
:milestone: phase4-release
:priority: critical
:END:

*Goal:* Finalize and release the draft publicly.

*Description:* Complete final preparation activities including documentation finalization, working group consensus, and public release coordination. Ensure the v0.1 standard is production-ready with comprehensive documentation, validation tools, and community engagement processes.

*** TODO Complete API documentation with usage examples
DEADLINE: <2025-07-28 Mon>
:PROPERTIES:
:labels: type:documentation priority:critical
:assignee: @team:technical
:END:

Finalize comprehensive API documentation including endpoint specifications, request/response examples, error handling, and integration patterns. Provide clear implementation guidance for developers adopting the BOOST standard in their systems.

*** TODO Add versioning strategy and changelog for v0.1
DEADLINE: <2025-07-28 Mon>
:PROPERTIES:
:labels: type:documentation priority:high
:assignee: @pwt-cd
:END:

*** TODO Create comprehensive test suite with validation examples
DEADLINE: <2025-07-28 Mon>
:PROPERTIES:
:labels: type:validation priority:high
:assignee: @team:technical
:END:

*** TODO Conduct final working group review meeting
DEADLINE: <2025-07-29 Tue>
:PROPERTIES:
:labels: type:review priority:critical
:assignee: @pwt-cd
:END:

Host final working group meeting to review the complete v0.1 specification, address any remaining concerns, and ensure consensus on release readiness. Document final decisions and prepare for formal approval vote.

*** TODO Approve v0.1 release with formal working group vote
DEADLINE: <2025-07-29 Tue>
:PROPERTIES:
:labels: type:process priority:critical
:assignee: @pwt-cd
:END:

Conduct formal working group vote to approve the v0.1 standard for public release. Follow W3C Community Group consensus procedures and document the decision with any dissenting opinions or conditions for future versions.

*** TODO Share pre-release with California agencies (PUC, IOUs)
DEADLINE: <2025-07-30 Wed>
:PROPERTIES:
:labels: type:review priority:high
:assignee: @team:stakeholders
:END:

*** TODO Publish v0.1 specification to GitHub with release notes
DEADLINE: <2025-07-31 Thu>
:PROPERTIES:
:labels: type:process priority:critical
:assignee: @pwt-cd
:END:

Execute the official v0.1 release including GitHub release creation, version tagging, and comprehensive release notes. Ensure all documentation, schemas, examples, and tools are properly packaged and accessible to the public.

*** TODO Create W3C Community Group announcement and summary
DEADLINE: <2025-07-31 Thu>
:PROPERTIES:
:labels: type:documentation priority:critical
:assignee: @pwt-cd
:END:

Draft and publish official W3C Community Group announcement summarizing the v0.1 release, key features, implementation guidance, and next steps. Communicate the standard's value proposition and adoption pathway to the broader community.

*** TODO Share on public mailing list with implementation guidance
DEADLINE: <2025-07-31 Thu>
:PROPERTIES:
:labels: type:process priority:high
:assignee: @pwt-cd
:END:

*** TODO Set up feedback collection process for post-release improvements
DEADLINE: <2025-07-31 Thu>
:PROPERTIES:
:labels: type:process priority:medium
:assignee: @team:technical
:END:

*** TODO Initiate working group leadership transition process
DEADLINE: <2025-07-31 Thu>
:PROPERTIES:
:labels: type:process priority:high
:assignee: @pwt-cd
:END:

Begin the formal transition of working group leadership as specified in the BOOST Charter. Initiate the chair selection process, document handoff procedures, and ensure continuity of governance for post-v0.1 development phases.

* Supporting Activities (Ongoing)

- *Weekly Standups (every Tuesday):* Track progress, unblock contributors.
- *Shared Drive / Git Repo:* Centralized working location for all contributions.
- *Async Comment Review:* Use commentable Google Docs or GitHub PRs.

* GitHub Integration

** Sync Project Plan to GitHub Issues and Milestones

#+BEGIN_SRC bash :results output
#!/bin/bash

# BOOST GitHub Project Sync Script
# Parses this org file and creates/updates GitHub issues and milestones

set -e

REPO="carbondirect/BOOST"
PROJECT_ID="7"
ORG_FILE="/Users/peter/src/BOOST/project_planning/Version01.org"
DRY_RUN=${DRY_RUN:-false}

echo "🚀 BOOST GitHub Project Sync"
echo "Repository: $REPO"
echo "Project: #$PROJECT_ID"
echo "Dry run: $DRY_RUN"
echo "----------------------------------------"

# Function to create milestone
create_milestone() {
    local title="$1"
    local due_date="$2"
    local description="$3"
    
    if [ "$DRY_RUN" = "true" ]; then
        echo "[DRY RUN] Would create milestone: $title (due: $due_date)"
        return 0
    fi
    
    # Check if milestone exists
    if gh api "repos/$REPO/milestones" --jq ".[] | select(.title == \"$title\") | .number" | grep -q .; then
        echo "✓ Milestone exists: $title"
        return 0
    fi
    
    echo "📅 Creating milestone: $title"
    gh api "repos/$REPO/milestones" --method POST \
        --field title="$title" \
        --field due_on="$due_date" \
        --field description="$description"
}

# Function to create issue
create_issue() {
    local title="$1"
    local body="$2"
    local labels="$3"
    local assignee="$4"
    local milestone="$5"
    local state="$6"
    
    if [ "$DRY_RUN" = "true" ]; then
        echo "[DRY RUN] Would create issue: $title"
        echo "  Labels: $labels"
        echo "  Assignee: $assignee"
        echo "  Milestone: $milestone"
        echo "  State: $state"
        return 0
    fi
    
    # Check if issue with this title already exists
    if gh issue list --repo "$REPO" --search "\"$title\"" --json title | jq -r '.[].title' | grep -Fxq "$title"; then
        echo "✓ Issue exists: $title"
        return 0
    fi
    
    echo "🔖 Creating issue: $title"
    
    # Get milestone number if specified
    milestone_number=""
    if [ -n "$milestone" ]; then
        milestone_number=$(gh api "repos/$REPO/milestones" --jq ".[] | select(.title == \"$milestone\") | .number")
    fi
    
    # Create issue
    issue_url=$(gh issue create --repo "$REPO" \
        --title "$title" \
        --body "$body" \
        --label "$labels" \
        ${milestone_number:+--milestone "$milestone_number"})
    
    # Add to project
    if [ -n "$issue_url" ]; then
        echo "📋 Adding to project #$PROJECT_ID"
        gh project item-add "$PROJECT_ID" --owner carbondirect --url "$issue_url"
    fi
    
    # Close if DONE
    if [ "$state" = "DONE" ]; then
        echo "✅ Closing completed issue"
        gh issue close "$issue_url" --reason completed
    fi
}

# Parse milestones from org file
echo "📋 Parsing milestones..."
while IFS= read -r line; do
    if [[ $line =~ ^\*\*\ (.+)\ \((.+)\)$ ]]; then
        milestone_title="${BASH_REMATCH[1]}"
        milestone_dates="${BASH_REMATCH[2]}"
        
        # Extract due date from properties (next few lines)
        due_date=""
        description=""
        while IFS= read -r prop_line; do
            if [[ $prop_line =~ DEADLINE:\ \<(.+)\ ]]; then
                due_date="${BASH_REMATCH[1]}T23:59:59Z"
            elif [[ $prop_line =~ ^\*Description:\*\ (.+) ]]; then
                description="${BASH_REMATCH[1]}"
                break
            elif [[ $prop_line =~ ^\*\*\* ]]; then
                break
            fi
        done
        
        if [ -n "$due_date" ]; then
            create_milestone "$milestone_title" "$due_date" "$description"
        fi
    fi
done < "$ORG_FILE"

echo ""
echo "🔖 Parsing tasks..."

# Parse tasks from org file
current_milestone=""
while IFS= read -r line; do
    # Track current milestone
    if [[ $line =~ ^\*\*\ (.+)\ \( ]]; then
        current_milestone="${BASH_REMATCH[1]}"
        continue
    fi
    
    # Parse tasks
    if [[ $line =~ ^\*\*\*\ (TODO|DOING|DONE)\ (.+)$ ]]; then
        task_state="${BASH_REMATCH[1]}"
        task_title="${BASH_REMATCH[2]}"
        
        # Skip DONE tasks for now
        if [ "$task_state" = "DONE" ]; then
            echo "⏭️  Skipping completed task: $task_title"
            continue
        fi
        
        # Extract properties
        labels=""
        assignee=""
        due_date=""
        description=""
        
        # Read properties and description
        while IFS= read -r prop_line; do
            if [[ $prop_line =~ :labels:\ (.+) ]]; then
                labels="${BASH_REMATCH[1]}"
                # Convert spaces to commas for GitHub labels
                labels=$(echo "$labels" | sed 's/ /,/g')
            elif [[ $prop_line =~ :assignee:\ (.+) ]]; then
                assignee="${BASH_REMATCH[1]}"
                # Convert team tags to individual assignees (would need mapping)
                if [[ $assignee =~ @team: ]]; then
                    assignee="" # Skip team assignments for now
                elif [[ $assignee =~ @(.+) ]]; then
                    assignee="${BASH_REMATCH[1]}"
                fi
            elif [[ $prop_line =~ DEADLINE:\ \<(.+)\ ]]; then
                due_date="${BASH_REMATCH[1]}"
            elif [[ $prop_line =~ :END: ]]; then
                # Start reading description
                while IFS= read -r desc_line; do
                    if [[ $desc_line =~ ^\*\*\* ]] || [[ $desc_line =~ ^\*\* ]] || [[ $desc_line =~ ^\* ]]; then
                        break
                    fi
                    if [ -n "$desc_line" ] && [[ ! $desc_line =~ ^\*Work\ completed:\* ]] && [[ ! $desc_line =~ ^\*Status:\* ]]; then
                        if [ -n "$description" ]; then
                            description="$description\n$desc_line"
                        else
                            description="$desc_line"
                        fi
                    fi
                done
                break
            fi
        done
        
        # Build issue body
        issue_body="$description"
        if [ -n "$due_date" ]; then
            issue_body="$issue_body\n\n**Due Date:** $due_date"
        fi
        if [ -n "$current_milestone" ]; then
            issue_body="$issue_body\n**Milestone:** $current_milestone"
        fi
        
        create_issue "$task_title" "$issue_body" "$labels" "$assignee" "$current_milestone" "$task_state"
    fi
done < "$ORG_FILE"

echo ""
echo "✅ Sync complete!"
echo ""
echo "🔗 View project: https://github.com/orgs/carbondirect/projects/$PROJECT_ID"
echo "🔗 View issues: https://github.com/$REPO/issues"

#+END_SRC

** Usage Instructions

To sync the project plan with GitHub:

1. *Dry run (preview changes):*
   #+BEGIN_EXAMPLE
   DRY_RUN=true bash
   #+END_EXAMPLE

2. *Execute sync:*
   #+BEGIN_EXAMPLE
   DRY_RUN=false bash
   #+END_EXAMPLE

3. *From org-mode:*
   - Place cursor in source block
   - =C-c C-c= to execute

** Notes

- Script creates milestones from H2 sections with due dates
- Creates issues from TODO/DOING tasks (skips DONE)
- Applies labels and assigns to project #7
- Handles existing milestones/issues gracefully
- Team assignments (@team:*) are skipped (add individual mapping as needed)



