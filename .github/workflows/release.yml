name: üè∑Ô∏è Release Documentation

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # All semantic versions: v1.0.0, v1.2.3, v2.1.0, etc.

  # Allow manual triggering for any version (with validation)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v3.0.0 for major, v2.1.0 for minor)'
        required: true
        type: string
      force_release:
        description: 'Force release even if not major version'
        required: false
        type: boolean
        default: false

# Ensure only one release builds at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  RELEASE_VERSION: ${{ github.event.inputs.version || github.ref_name }}

jobs:
  build-release:
    name: üì¶ Build Release Documentation
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/carbondirect/boost/boost-builder:latest
      options: --pull=missing
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      release-name: ${{ steps.version-info.outputs.release-name }}
      is-prerelease: ${{ steps.version-info.outputs.is-prerelease }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version-info
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          
          # Clean version (remove 'refs/tags/' if present)
          VERSION=$(echo "$VERSION" | sed 's/refs\/tags\///')
          
          # Validate version format and check if major version
          echo "üîç Validating version: $VERSION"
          
          if ! echo "$VERSION" | grep -qE "^v[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.2.3"
            exit 1
          fi
          
          # Extract version components
          VERSION_CLEAN=$(echo "$VERSION" | sed 's/^v//')
          MAJOR=$(echo "$VERSION_CLEAN" | cut -d. -f1)
          MINOR=$(echo "$VERSION_CLEAN" | cut -d. -f2) 
          PATCH=$(echo "$VERSION_CLEAN" | cut -d. -f3)
          
          # Determine version type
          if [ "$MINOR" = "0" ] && [ "$PATCH" = "0" ]; then
            VERSION_TYPE="major"
            IS_MAJOR_VERSION="true"
            echo "üéâ Major version detected: $VERSION"
          elif [ "$PATCH" = "0" ]; then
            VERSION_TYPE="minor"
            IS_MAJOR_VERSION="false"
            echo "üîÑ Minor version detected: $VERSION"
          else
            VERSION_TYPE="patch"
            IS_MAJOR_VERSION="false"
            echo "ü©π Patch version detected: $VERSION"
          fi
          
          echo "‚úÖ All version types now trigger automatic releases"
          
          # Generate release name based on version type
          case "$VERSION_TYPE" in
            "major")
              RELEASE_NAME="Biomass Open Origin Standard for Tracking (BOOST) $VERSION - Major Release"
              ;;
            "minor")  
              RELEASE_NAME="Biomass Open Origin Standard for Tracking (BOOST) $VERSION - Minor Release"
              ;;
            "patch")
              RELEASE_NAME="Biomass Open Origin Standard for Tracking (BOOST) $VERSION - Patch Release"
              ;;
            *)
              RELEASE_NAME="Biomass Open Origin Standard for Tracking (BOOST) $VERSION"
              ;;
          esac
          
          # Check if pre-release (contains alpha, beta, rc)
          IS_PRERELEASE="false"
          if echo "$VERSION" | grep -qE "(alpha|beta|rc|dev)"; then
            IS_PRERELEASE="true"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "is-major-version=$IS_MAJOR_VERSION" >> $GITHUB_OUTPUT
          
          echo "::notice title=Release Build::Building $RELEASE_NAME"

      - name: Verify containerized environment
        run: |
          echo "üê≥ Docker containerized release build environment"
          echo "Python version: $(python3 --version)"
          echo "Bikeshed version: $(bikeshed --version)"
          echo "TeXLive available: $(which pdflatex && echo 'Yes' || echo 'No')"
          echo "Pandoc version: $(pandoc --version | head -1)"

      - name: Run full schema validation
        working-directory: drafts/current/specifications
        run: |
          echo "üîç Running comprehensive release schema validation..."
          python3 -c "
          import json
          import sys
          from pathlib import Path
          
          schema_dir = Path('../schema')
          errors = []
          
          # Comprehensive schema validation for release
          schema_files = list(schema_dir.rglob('validation_schema.json'))
          
          print(f'Validating {len(schema_files)} schema files for release...')
          
          for schema_file in schema_files:
              try:
                  with open(schema_file, 'r') as f:
                      schema_data = json.load(f)
                  
                  # Validate schema structure
                  if 'schema' not in schema_data:
                      errors.append(f'{schema_file}: Missing schema key')
                      continue
                  
                  schema = schema_data['schema']
                  
                  # Validate required properties
                  if 'type' not in schema:
                      errors.append(f'{schema_file}: Missing type property')
                  if 'properties' not in schema:
                      errors.append(f'{schema_file}: Missing properties')
                  
                  # Validate BOOST metadata
                  if 'boost_metadata' not in schema_data:
                      errors.append(f'{schema_file}: Missing boost_metadata')
                  else:
                      metadata = schema_data['boost_metadata']
                      if 'entity' not in metadata:
                          errors.append(f'{schema_file}: Missing entity metadata')
                      else:
                          entity = metadata['entity']
                          required_meta = ['name', 'primaryKey', 'area']
                          for req in required_meta:
                              if req not in entity:
                                  errors.append(f'{schema_file}: Missing {req} in entity metadata')
                  
              except json.JSONDecodeError as e:
                  errors.append(f'{schema_file}: Invalid JSON - {e}')
              except Exception as e:
                  errors.append(f'{schema_file}: Validation error - {e}')
          
          if errors:
              print('‚ùå Release schema validation failed:')
              for error in errors:
                  print(f'  - {error}')
              sys.exit(1)
          
          print(f'‚úÖ Release schema validation passed for {len(schema_files)} schemas')
          "

      - name: Build HTML documentation
        working-directory: drafts/current/specifications
        run: |
          echo "üèóÔ∏è Building release HTML documentation..."
          chmod +x build-spec.sh
          ./build-spec.sh

      - name: Generate PDF documentation
        working-directory: drafts/current/specifications
        shell: bash
        run: |
          set +e  # Don't exit on LaTeX warnings
          
          echo "üìÑ Generating PDF documentation..."
          
          # Check if we have LaTeX source
          if [ -f "boost-spec.tex" ]; then
            echo "Building PDF from LaTeX source..."
            
            # Run LaTeX build (3 passes for references) - warnings are normal
            pdflatex -shell-escape -interaction=nonstopmode boost-spec.tex || true
            pdflatex -shell-escape -interaction=nonstopmode boost-spec.tex || true  
            pdflatex -shell-escape -interaction=nonstopmode boost-spec.tex || true
            
            # Check if PDF was actually generated (this is what matters)
            if [ -f "boost-spec.pdf" ]; then
              echo "‚úÖ PDF generated from LaTeX: boost-spec.pdf"
              mv boost-spec.pdf boost-spec-${{ steps.version-info.outputs.version }}.pdf
              echo "‚úÖ PDF renamed to boost-spec-${{ steps.version-info.outputs.version }}.pdf"
              ls -la boost-spec-${{ steps.version-info.outputs.version }}.pdf
            else
              echo "‚ö†Ô∏è LaTeX PDF generation failed, attempting Pandoc conversion..."
            fi
          fi
          
          set -e  # Re-enable exit on error for subsequent steps
          
          # Fallback: Generate PDF from HTML using Pandoc
          if [ ! -f "boost-spec-${{ steps.version-info.outputs.version }}.pdf" ]; then
            echo "Generating PDF from HTML using Pandoc..."
            
            # Create a clean HTML version for PDF conversion
            python3 -c "
            import re
            with open('boost-spec.html', 'r') as f:
                html = f.read()
            
            # Remove interactive elements and styling that don't work in PDF
            html = re.sub(r'<script[^>]*>.*?</script>', '', html, flags=re.DOTALL)
            html = re.sub(r'<style[^>]*>.*?</style>', '', html, flags=re.DOTALL)
            html = re.sub(r'onclick=\"[^\"]*\"', '', html)
            html = re.sub(r'class=\"[^\"]*\"', '', html)
            html = re.sub(r'id=\"toc\"', '', html)  # Remove TOC for cleaner PDF
            
            with open('boost-spec-clean.html', 'w') as f:
                f.write(html)
            "
            
            # Generate PDF with Pandoc
            pandoc boost-spec-clean.html \
              -o "boost-spec-${{ steps.version-info.outputs.version }}.pdf" \
              --pdf-engine=xelatex \
              --template=eisvogel \
              --from=html \
              --to=pdf \
              --metadata title="BOOST Data Standard ${{ steps.version-info.outputs.version }}" \
              --metadata author="BOOST Consortium" \
              --metadata date="$(date +%Y-%m-%d)" \
              --toc \
              --toc-depth=3 \
              --number-sections \
              --highlight-style=github \
              --variable colorlinks=true \
              --variable linkcolor=blue \
              --variable urlcolor=blue \
              --variable toccolor=blue \
              || echo "‚ö†Ô∏è Pandoc PDF generation also failed"
            
            rm -f boost-spec-clean.html
            
            if [ -f "boost-spec-${{ steps.version-info.outputs.version }}.pdf" ]; then
              echo "‚úÖ PDF generated from HTML: boost-spec-${{ steps.version-info.outputs.version }}.pdf"
            else
              echo "‚ùå PDF generation failed"
            fi
          fi

      - name: Create release package
        working-directory: drafts/current/specifications
        run: |
          echo "üì¶ Creating release package..."
          
          VERSION="${{ steps.version-info.outputs.version }}"
          PACKAGE_NAME="boost-documentation-${VERSION}"
          
          mkdir -p "release-package/${PACKAGE_NAME}"
          
          # Copy main documentation
          cp boost-spec.html "release-package/${PACKAGE_NAME}/"
          
          # Copy PDF if it exists
          if [ -f "boost-spec-${VERSION}.pdf" ]; then
            cp "boost-spec-${VERSION}.pdf" "release-package/${PACKAGE_NAME}/"
          fi
          
          # Copy ERD Navigator
          cp -r erd-navigator "release-package/${PACKAGE_NAME}/"
          
          # Copy schema files
          cp -r ../schema "release-package/${PACKAGE_NAME}/"
          
          # Copy supporting files
          cp -r includes "release-package/${PACKAGE_NAME}/"
          cp respec-style.css "release-package/${PACKAGE_NAME}/"
          
          # Create README for the release
          cat > "release-package/${PACKAGE_NAME}/README.md" << EOF
          # BOOST Data Standard Documentation ${VERSION}
          
          This package contains the complete BOOST Data Standard documentation for version ${VERSION}.
          
          ## Contents
          
          - **boost-spec.html** - Complete HTML documentation with interactive features
          - **boost-spec-${VERSION}.pdf** - PDF version for offline reading (if available)
          - **erd-navigator/** - Interactive Entity Relationship Diagram explorer
          - **schema/** - All JSON schema files for the 33+ BOOST entities
          - **includes/** - Documentation content modules
          - **respec-style.css** - Styling for the HTML documentation
          
          ## Viewing the Documentation
          
          ### HTML Version
          Open \`boost-spec.html\` in a web browser. For best experience, serve from a web server:
          
          \`\`\`bash
          python3 -m http.server 8000
          # Then visit http://localhost:8000/boost-spec.html
          \`\`\`
          
          ### ERD Navigator
          Open \`erd-navigator/index.html\` to explore the interactive entity relationship diagram.
          
          ### Schema Files
          The \`schema/\` directory contains JSON Schema validation files for all BOOST entities.
          
          ## Version Information
          
          - **Version:** ${VERSION}
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Git Commit:** ${GITHUB_SHA::8}
          
          ## Links
          
          - [BOOST GitHub Repository](https://github.com/carbondirect/BOOST)
          - [Online Documentation](https://carbondirect.github.io/BOOST)
          
          EOF
          
          # Create archive
          cd release-package
          zip -r "${PACKAGE_NAME}.zip" "${PACKAGE_NAME}/"
          tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}/"
          
          echo "üì¶ Release package created:"
          ls -la "${PACKAGE_NAME}".{zip,tar.gz}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boost-release-${{ steps.version-info.outputs.version }}
          path: |
            drafts/current/specifications/release-package/
          retention-days: 90

  create-github-release:
    name: üöÄ Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: boost-release-${{ needs.build-release.outputs.version }}
          path: ./release-artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.build-release.outputs.version }}"
          
          # Generate release notes
          cat > release-notes.md << EOF
          # Biomass Open Origin Standard for Tracking (BOOST) ${VERSION}
          
          This release contains the complete Biomass Open Origin Standard for Tracking (BOOST) documentation and schemas.
          EOF
          
          # Add major version specific content
          IS_MAJOR="${{ needs.build-release.outputs.is-major-version }}"
          if [ "$IS_MAJOR" = "true" ]; then
            cat >> release-notes.md << EOF
          
          ## üéâ Major Release Highlights
          
          This is a **major version release** (${VERSION}) containing significant updates and improvements to the Biomass Open Origin Standard for Tracking (BOOST).
          
          ### What's New in This Major Version
          - Breaking changes may be included - please review documentation
          - New entity relationships and schema updates
          - Enhanced validation and integrity checking
          - Updated reference implementations
          
          **‚ö†Ô∏è Important:** Major releases may include breaking changes. Please review the full documentation before upgrading existing implementations.
          EOF
          fi
          
          cat >> release-notes.md << EOF
          
          ## üìö What's Included
          
          - **Complete HTML Documentation** with interactive navigation
          - **PDF Documentation** for offline reference  
          - **Interactive ERD Navigator** for exploring entity relationships
          - **JSON Schema Files** for all 33+ BOOST entities
          - **Python Reference Implementation** with Pydantic v2 models
          
          ## üîó Quick Links
          
          - [üìñ Online Documentation](https://carbondirect.github.io/BOOST/)
          - [üîç ERD Navigator](https://carbondirect.github.io/BOOST/erd-navigator/)
          - [üìã Schema Files](https://carbondirect.github.io/BOOST/schema/)
          
          ## üìã Key Features
          
          - **33+ Entity Types** across 7 thematic areas
          - **Complete Traceability Chain** from harvest to end product
          - **Foreign Key Validation** ensuring data integrity
          - **JSON-LD Context** for linked data interoperability
          - **Multi-format Output** (HTML, PDF, JSON Schema)
          
          ## üîß For Developers
          
          Download the release package to access:
          - Validated JSON Schema files
          - Python Pydantic models
          - Reference implementations
          - Complete documentation source
          
          ## üìä Build Information
          
          - **Release Type:** $([ "$IS_MAJOR" = "true" ] && echo "Major Release" || echo "Standard Release")
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Git Commit:** ${GITHUB_SHA::8}
          - **Schemas Validated:** ‚úÖ All entity schemas passed integrity checks
          - **Build Status:** ‚úÖ All quality gates passed
          EOF
          
          echo "Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-release.outputs.version }}
          name: ${{ needs.build-release.outputs.release-name }}
          body_path: release-notes.md
          prerelease: ${{ needs.build-release.outputs.is-prerelease == 'true' }}
          files: |
            release-artifacts/boost-documentation-${{ needs.build-release.outputs.version }}.zip
            release-artifacts/boost-documentation-${{ needs.build-release.outputs.version }}.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release pointer
        if: needs.build-release.outputs.is-prerelease == 'false'
        run: |
          echo "üîó Updated latest release pointer to ${{ needs.build-release.outputs.version }}"