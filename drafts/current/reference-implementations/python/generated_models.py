"""
Auto-generated BOOST Python models from JSON schemas.
Generated by generate_missing_models.py

Add these models to models.py after review.
"""

from datetime import datetime
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum
from models import BOOSTBaseModel

# Auto-generated models - DO NOT EDIT MANUALLY
# Generated by generate_missing_models.py


class AuditAudittype(str, Enum):
    """Enumeration values for auditType in Audit."""
    INITIAL = "Initial"
    SURVEILLANCE = "Surveillance"
    TRANSFER = "Transfer"

class Audit(BOOSTBaseModel):
    """
    Audit entity model for BOOST standard.
    
    Audit entity in BOOST data model
    """
    
    audit_id: str = Field(alias="auditId", pattern=r"^AUD-[A-Z0-9-_]+$")
    audit_type: AuditAudittype = Field(alias="auditType")
    audit_date: datetime = Field(alias="auditDate")
    organization_id: str = Field(alias="organizationId", pattern=r"^ORG-[A-Z0-9-_]+$")
    cb_id: str = Field(None, alias="cbId", pattern=r"^CB-[A-Z0-9-_]+$")
    findings: str = None
    report_url: str = Field(None, alias="reportUrl")
    audit_geographic_data_id: str = Field(None, alias="auditGeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$")



class BiometricIdentifierCapturemethod(str, Enum):
    """Enumeration values for captureMethod in BiometricIdentifier."""
    OPTICAL_SCANNER = "optical_scanner"
    PHOTO_ANALYSIS = "photo_analysis"
    MANUAL_PHOTO = "manual_photo"
    VISUAL_INSPECTION = "visual_inspection"

class BiometricIdentifierVerificationmethod(str, Enum):
    """Enumeration values for verificationMethod in BiometricIdentifier."""
    AUTOMATED_MATCHING = "automated_matching"
    MANUAL_REVIEW = "manual_review"
    CROSS_VALIDATION = "cross_validation"
    SECONDARY_IDENTIFIER = "secondary_identifier"

class BiometricIdentifier(BOOSTBaseModel):
    """
    BiometricIdentifier entity model for BOOST standard.
    
    BiometricIdentifier entity in BOOST data model
    """
    
    biometric_id: str = Field(alias="biometricId", pattern=r"^BIO-[A-Z0-9-_]+$")
    traceable_unit_id: str = Field(alias="traceableUnitId", pattern=r"^TRU-[A-Z0-9-_]+$", description="Foreign key to TraceableUnit entity")
    biometric_signature: str = Field(alias="biometricSignature")
    capture_method: BiometricIdentifierCapturemethod = Field(alias="captureMethod")
    confidence_score: float = Field(alias="confidenceScore", ge=0, le=100, description="Pattern matching reliability score (0-100)")
    fallback_required: bool = Field(alias="fallbackRequired", description="True if low confidence requires secondary verification")
    verification_method: BiometricIdentifierVerificationmethod = Field(None, alias="verificationMethod", description="Method used to verify biometric match")
    capture_geographic_data_id: str = Field(None, alias="captureGeographicDataId")
    capture_timestamp: datetime = Field(alias="captureTimestamp")
    tracking_point_id: str = Field(None, alias="trackingPointId")
    species_biometrics: List[str] = Field(None, alias="speciesBiometrics")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of the most recent data update")



class CertificateStatus(str, Enum):
    """Enumeration values for status in Certificate."""
    ACTIVE = "active"
    EXPIRED = "expired"
    REVOKED = "revoked"
    SUSPENDED = "suspended"

class Certificate(BOOSTBaseModel):
    """
    Certificate entity model for BOOST standard.
    
    Certificate entity representing formal certification records issued by certification bodies
    """
    
    certificate_id: str = Field(alias="certificateId", pattern=r"^CERT-[A-Z0-9-_]+$", min_length=5, max_length=50, description="Standard certificate identifier using CERT- pattern")
    certificate_number: str = Field(alias="certificateNumber", pattern=r"^[A-Z0-9][A-Z0-9/_-]+$", min_length=1, description="Official certificate number (primary key)")
    certification_scheme_id: str = Field(alias="CertificationSchemeId", pattern=r"^CERT-SCHEME-[A-Z0-9-_]+$", min_length=1, description="Uses EntityNameId convention referencing CertificationScheme")
    certification_body_id: str = Field(alias="CertificationBodyId", pattern=r"^CB-[A-Z0-9-_]+$", min_length=1, description="Uses EntityNameId convention referencing CertificationBody")
    organization_id: str = Field(alias="OrganizationId", pattern=r"^ORG-[A-Z0-9-_]+$", min_length=1, description="Uses EntityNameId convention referencing Organization receiving the certificate")
    date_of_issue: datetime = Field(alias="dateOfIssue", description="Date of certificate issuance")
    date_of_expiry: datetime = Field(alias="dateOfExpiry", description="Certificate expiry date")
    status: CertificateStatus = Field(description="Current certificate status")
    scope_of_certification: str = Field(alias="scopeOfCertification", min_length=1, description="Summary of certification coverage")
    version_number: str = Field(alias="versionNumber", description="Version identifier of the certification standard")
    version_year: int = Field(None, alias="versionYear", ge=1990, le=2050, description="Year of the standard's relevant version release")
    conditional_requirements: List[Dict[str, Any]] = Field(None, alias="conditionalRequirements", description="Special conditions or requirements")
    suspension_history: List[Dict[str, Any]] = Field(None, alias="suspensionHistory", description="History of certificate suspensions")
    audit_schedule: Dict[str, Any] = Field(None, alias="auditSchedule", description="Scheduled audit information")
    certificate_document: str = Field(None, alias="certificateDocument", description="Link or reference to certificate document")
    verification_statement_id: str = Field(None, alias="VerificationStatementId", pattern=r"^VS-[A-Z0-9-_]+$", description="Uses EntityNameId convention referencing VerificationStatement for third-party validation")



class CertificationBodyCbtype(str, Enum):
    """Enumeration values for cbType in CertificationBody."""
    SCHEME_OWNER = "scheme-owner"
    THIRD_PARTY = "third-party"
    ACCREDITED_BODY = "accredited-body"
    REGULATORY_BODY = "regulatory-body"

class CertificationBodyAccreditationstatus(str, Enum):
    """Enumeration values for accreditationStatus in CertificationBody."""
    ACTIVE = "active"
    SUSPENDED = "suspended"
    EXPIRED = "expired"
    PENDING = "pending"
    REVOKED = "revoked"

class CertificationBody(BOOSTBaseModel):
    """
    CertificationBody entity model for BOOST standard.
    
    Certification Body entity representing independent organizations authorized to issue certificates
    """
    
    cb_id: str = Field(alias="cbId", pattern=r"^CB-[A-Z0-9-_]+$", min_length=1, description="Unique identifier for the certification body (primary key)")
    cb_name: str = Field(alias="cbName", min_length=1, description="Official name of the certification body")
    cb_type: CertificationBodyCbtype = Field(alias="cbType", description="Type or category of certification body")
    accreditation_status: CertificationBodyAccreditationstatus = Field(alias="accreditationStatus", description="Current accreditation status")
    authorized_schemes: List[str] = Field(alias="authorizedSchemes", description="List of certification schemes the CB can certify under")
    contact_information: Dict[str, Any] = Field(alias="contactInformation", description="Contact details for the certification body")
    operational_regions: List[str] = Field(alias="operationalRegions", description="Geographic regions where CB operates (ISO country codes)")
    accreditation_body: str = Field(None, alias="accreditationBody", description="Organization that accredited this CB")
    validity_period: Dict[str, Any] = Field(alias="validityPeriod", description="Period of CB authorization")
    specializations: List[str] = Field(None, description="Specific areas of certification expertise")
    performance_metrics: Dict[str, Any] = Field(None, alias="performanceMetrics", description="CB performance and quality indicators")



class CertificationSchemeSchemetype(str, Enum):
    """Enumeration values for schemeType in CertificationScheme."""
    FOREST_MANAGEMENT = "forest_management"
    CHAIN_OF_CUSTODY = "chain_of_custody"
    CONTROLLED_WOOD = "controlled_wood"
    BIOMASS_SUSTAINABILITY = "biomass_sustainability"
    CARBON_OFFSET = "carbon_offset"
    ENVIRONMENTAL_MANAGEMENT = "environmental_management"

class CertificationScheme(BOOSTBaseModel):
    """
    CertificationScheme entity model for BOOST standard.
    
    CertificationScheme entity defining certification standards and requirements with geographic applicability for Phase 2 BOOST traceability system enhancements
    """
    
    certification_scheme_id: str = Field(alias="certificationSchemeId", pattern=r"^CERT-SCHEME-[A-Z0-9-_]+$", min_length=1, description="Unique identifier for the certification scheme")
    scheme_name: str = Field(alias="schemeName", min_length=1, description="Official name of the certification scheme")
    scheme_type: CertificationSchemeSchemetype = Field(alias="schemeType", description="Type of certification scheme")
    scheme_standard: str = Field(None, alias="schemeStandard", description="Standard or version identifier")
    issuing_organization_id: str = Field(alias="issuingOrganizationId", pattern=r"^ORG-[A-Z0-9-_]+$", description="Foreign key to organization that issues this scheme")
    scheme_description: str = Field(None, alias="schemeDescription", description="Detailed description of the certification scheme")
    applicable_geographic_areas: List[str] = Field(None, alias="applicableGeographicAreas", description="Geographic areas where this scheme is applicable")
    eligible_material_types: List[str] = Field(None, alias="eligibleMaterialTypes", description="Material types eligible for this certification scheme")
    claim_types: List[str] = Field(None, alias="claimTypes", description="Types of claims supported by this scheme")
    audit_requirements: str = Field(None, alias="auditRequirements", description="Audit and verification requirements")
    chain_of_custody_requirements: str = Field(None, alias="chainOfCustodyRequirements", description="Chain of custody tracking and documentation requirements")
    documentation_requirements: List[str] = Field(None, alias="documentationRequirements", description="Required documentation and record-keeping")
    validity_period: str = Field(None, alias="validityPeriod", description="Typical validity period for certifications under this scheme")
    website: str = Field(None, description="Official website for the certification scheme")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of the most recent data update")



class Customer(BOOSTBaseModel):
    """
    Customer entity model for BOOST standard.
    
    Customer entity in BOOST data model
    """
    
    customer_id: str = Field(alias="customerId", pattern=r"^CUST-[A-Z0-9-_]+$", min_length=5, max_length=50, description="Unique identifier for the customer")
    customer_name: str = Field(alias="customerName")
    address: str = None
    geographic_data_id: str = Field(None, alias="GeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Customer location - uses EntityNameId convention referencing GeographicData")



class DataReconciliationReconciliationstatus(str, Enum):
    """Enumeration values for reconciliationStatus in DataReconciliation."""
    PENDING = "pending"
    RESOLVED = "resolved"
    DISPUTED = "disputed"

class DataReconciliation(BOOSTBaseModel):
    """
    DataReconciliation entity model for BOOST standard.
    
    DataReconciliation entity in BOOST data model
    """
    
    reconciliation_id: str = Field(alias="reconciliationId", pattern=r"^REC-[A-Z0-9-_]+$")
    traceable_unit_id: str = Field(alias="traceableUnitId")
    transaction_id: str = Field(None, alias="transactionId")
    forest_measurement: float = Field(alias="forestMeasurement", ge=0)
    mill_measurement: float = Field(alias="millMeasurement", ge=0)
    discrepancy: float = ...
    reconciliation_status: DataReconciliationReconciliationstatus = Field(alias="reconciliationStatus")
    discrepancy_reason: str = Field(None, alias="discrepancyReason")
    reconciliation_date: datetime = Field(alias="reconciliationDate")
    reconciliation_operator: str = Field(None, alias="reconciliationOperator")
    species_discrepancies: List[str] = Field(None, alias="speciesDiscrepancies")
    tolerance_percentage: float = Field(None, alias="tolerancePercentage", ge=0, le=100)
    resolution_notes: str = Field(None, alias="resolutionNotes")
    last_updated: datetime = Field(None, alias="lastUpdated")



class EnergyCarbonDataDatatype(str, Enum):
    """Enumeration values for dataType in EnergyCarbonData."""
    MOISTURE = "moisture"
    TRANSPORT = "transport"
    FUEL_CONSUMPTION = "fuel consumption"
    CARBON_INTENSITY = "carbon_intensity"
    ENERGY_CONTENT = "energy_content"
    EMISSIONS = "emissions"
    LIFECYCLE_ASSESSMENT = "lifecycle_assessment"

class EnergyCarbonDataUnit(str, Enum):
    """Enumeration values for unit in EnergyCarbonData."""
    PERCENTAGE = "percentage"
    KG_CO2E = "kg_CO2e"
    LITERS = "liters"
    MJ = "MJ"
    GCO2E/MJ = "gCO2e/MJ"
    MJ/KG = "MJ/kg"
    GCO2E/GALLON = "gCO2e/gallon"
    MJ/GALLON = "MJ/gallon"

class EnergyCarbonDataSource(str, Enum):
    """Enumeration values for source in EnergyCarbonData."""
    FIELD_MEASUREMENT = "field_measurement"
    LABORATORY_ANALYSIS = "laboratory_analysis"
    DEFAULT_VALUES = "default_values"
    CALCULATED = "calculated"

class EnergyCarbonDataMeasurementmethod(str, Enum):
    """Enumeration values for measurementMethod in EnergyCarbonData."""
    OVEN_DRY = "oven_dry"
    ELECTRICAL_RESISTANCE = "electrical_resistance"
    MICROWAVE = "microwave"
    NEAR_INFRARED = "near_infrared"
    GRAVIMETRIC = "gravimetric"
    CA_GREET3_0 = "CA-GREET3.0"
    GREET2023 = "GREET2023"
    DIRECT_MEASUREMENT = "Direct_Measurement"
    LCA_MODELING = "LCA_Modeling"

class EnergyCarbonDataLcfspathwaytype(str, Enum):
    """Enumeration values for lcfsPathwayType in EnergyCarbonData."""
    LOOKUP_TABLE = "Lookup_Table"
    TIER_1 = "Tier_1"
    TIER_2 = "Tier_2"
    NOT_LCFS = "Not_LCFS"

class EnergyCarbonDataLifecyclestage(str, Enum):
    """Enumeration values for lifeCycleStage in EnergyCarbonData."""
    FEEDSTOCK = "feedstock"
    PRODUCTION = "production"
    TRANSPORT = "transport"
    DISTRIBUTION = "distribution"
    COMBUSTION = "combustion"
    FULL_LIFECYCLE = "full_lifecycle"

class EnergyCarbonData(BOOSTBaseModel):
    """
    EnergyCarbonData entity model for BOOST standard.
    
    EnergyCarbonData entity in BOOST data model
    """
    
    energy_carbon_data_id: str = Field(alias="energyCarbonDataId", pattern=r"^ECD-[A-Z0-9-_]+$")
    data_type: EnergyCarbonDataDatatype = Field(alias="dataType")
    value: float = ...
    unit: EnergyCarbonDataUnit = ...
    source: EnergyCarbonDataSource = ...
    measurement_method: EnergyCarbonDataMeasurementmethod = Field(None, alias="measurementMethod")
    traceable_unit_id: str = Field(None, alias="traceableUnitId", pattern=r"^TRU-[A-Z0-9-_]+$")
    measurement_record_id: str = Field(None, alias="measurementRecordId", pattern=r"^MR-[A-Z0-9-_]+$")
    measurement_timestamp: datetime = Field(None, alias="measurementTimestamp")
    measurement_geographic_data_id: str = Field(None, alias="measurementGeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$")
    temperature_conditions: float = Field(None, alias="temperatureConditions")
    humidity_conditions: float = Field(None, alias="humidityConditions")
    lcfs_pathway_type: EnergyCarbonDataLcfspathwaytype = Field(None, alias="lcfsPathwayType", description="LCFS pathway tier classification")
    energy_economy_ratio: float = Field(None, alias="energyEconomyRatio", ge=0.5, le=3.0, description="Energy economy ratio for LCFS credit calculation")
    life_cycle_stage: EnergyCarbonDataLifecyclestage = Field(None, alias="lifeCycleStage", description="Lifecycle stage for carbon intensity data")
    regulatory_benchmark: float = Field(None, alias="regulatoryBenchmark", description="CARB regulatory benchmark for comparison (gCO2e/MJ)")
    ca_greet_version: str = Field(None, alias="caGreetVersion", pattern=r"^[0-9]+\\.[0-9]+$", description="CA-GREET model version used for calculation")
    quality_assurance: str = Field(None, alias="qualityAssurance")



class EquipmentEquipmenttype(str, Enum):
    """Enumeration values for equipmentType in Equipment."""
    HARVESTER = "harvester"
    SKIDDER = "skidder"
    FORWARDER = "forwarder"
    CHIPPER = "chipper"
    LOADER = "loader"
    SAW = "saw"
    KILN = "kiln"
    DEBARKER = "debarker"
    GRINDER = "grinder"
    SCREENER = "screener"
    CONVEYOR = "conveyor"
    OTHER = "other"

class EquipmentOperationalstatus(str, Enum):
    """Enumeration values for operationalStatus in Equipment."""
    ACTIVE = "active"
    MAINTENANCE = "maintenance"
    INACTIVE = "inactive"
    RETIRED = "retired"
    REPAIR = "repair"

class Equipment(BOOSTBaseModel):
    """
    Equipment entity model for BOOST standard.
    
    Equipment entity representing forestry machinery and equipment used in biomass harvesting and processing operations
    """
    
    equipment_id: str = Field(alias="equipmentId", pattern=r"^EQ-[A-Z0-9-_]+$", min_length=5, max_length=50, description="Unique identifier for the equipment")
    equipment_name: str = Field(alias="equipmentName", min_length=2, max_length=200, description="Descriptive name of the equipment")
    equipment_type: EquipmentEquipmenttype = Field(alias="equipmentType", description="Type of forestry equipment")
    organization_id: str = Field(alias="organizationId", pattern=r"^ORG-[A-Z0-9-_]+$", description="Foreign key to owning organization")
    manufacturer: str = Field(None, max_length=100, description="Equipment manufacturer")
    model: str = Field(None, max_length=100, description="Equipment model designation")
    serial_number: str = Field(None, alias="serialNumber", max_length=100, description="Manufacturer serial number")
    year_manufactured: int = Field(None, alias="yearManufactured", ge=1950, le=2050, description="Year the equipment was manufactured")
    operational_status: EquipmentOperationalstatus = Field(alias="operationalStatus", description="Current operational status of the equipment")
    specifications: Dict[str, Any] = Field(None, description="Technical specifications for the equipment")
    current_operator_id: str = Field(None, alias="currentOperatorId", pattern=r"^OP-[A-Z0-9-_]+$", description="Foreign key to current operator (if assigned)")
    assigned_tracking_point_id: str = Field(None, alias="assignedTrackingPointId", pattern=r"^TP-[A-Z0-9-_]+$", description="Foreign key to current location/assignment")
    maintenance_schedule: Dict[str, Any] = Field(None, alias="maintenanceSchedule", description="Maintenance schedule information")
    certifications: List[str] = Field(None, description="Equipment certifications (safety, emissions, etc.)")
    acquisition_date: datetime = Field(None, alias="acquisitionDate", description="Date equipment was acquired by organization")
    acquisition_cost: float = Field(None, alias="acquisitionCost", ge=0, description="Equipment acquisition cost in USD")
    insurance_info: Dict[str, Any] = Field(None, alias="insuranceInfo", description="Equipment insurance information")
    notes: str = Field(None, max_length=1000, description="Additional notes or comments about the equipment")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of the most recent data update")



class GeographicDataDatatype(str, Enum):
    """Enumeration values for dataType in GeographicData."""
    HARVEST_SITE = "harvest_site"
    PROCESSING_LOCATION = "processing_location"
    ADMINISTRATIVE_BOUNDARY = "administrative_boundary"
    SUPPLY_BASE_AREA = "supply_base_area"
    SKID_ROAD = "skid_road"
    FOREST_ROAD = "forest_road"
    MILL_ENTRANCE = "mill_entrance"

class GeographicData(BOOSTBaseModel):
    """
    GeographicData entity model for BOOST standard.
    
    GeographicData entity in BOOST data model
    """
    
    geographic_data_id: str = Field(alias="geographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Unique identifier for the geographic data")
    geo_json_data: Dict[str, Any] = Field(alias="geoJsonData", description="Valid GeoJSON object (Point, Polygon, LineString, etc.)")
    data_type: GeographicDataDatatype = Field(alias="dataType", description="Type of geographic data")
    description: str = Field(description="Human-readable description of the geographic area")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of the most recent data update")
    coordinate_system: str = Field(None, alias="coordinateSystem", description="Coordinate reference system (e.g., WGS84, UTM Zone 10N)")
    accuracy: float = Field(None, ge=0, description="GPS accuracy in meters")
    elevation_m: float = Field(None, alias="elevationM", description="Elevation in meters above sea level")
    administrative_region: str = Field(None, alias="administrativeRegion", description="Administrative region or jurisdiction")
    access_restrictions: str = Field(None, alias="accessRestrictions", description="Any access restrictions or special conditions")



class IdentificationMethodMethodtype(str, Enum):
    """Enumeration values for methodType in IdentificationMethod."""
    BIOMETRIC = "biometric"
    RFID = "rfid"
    QR_CODE = "qr_code"
    BARCODE = "barcode"
    MANUAL_ID = "manual_id"
    PHOTO_DOCUMENTATION = "photo_documentation"
    HYBRID = "hybrid"

class IdentificationMethodImplementationcost(str, Enum):
    """Enumeration values for implementationCost in IdentificationMethod."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"

class IdentificationMethodScalabilityfactor(str, Enum):
    """Enumeration values for scalabilityFactor in IdentificationMethod."""
    INDIVIDUAL = "individual"
    BATCH = "batch"
    BULK = "bulk"
    UNLIMITED = "unlimited"

class IdentificationMethod(BOOSTBaseModel):
    """
    IdentificationMethod entity model for BOOST standard.
    
    Catalog of available identification methods for TraceableUnit tracking
    """
    
    method_id: str = Field(alias="methodId", pattern=r"^IM-[A-Z0-9-_]+$", description="Unique identifier for the identification method")
    method_type: IdentificationMethodMethodtype = Field(alias="methodType", description="Type of identification method")
    technology_readiness_level: int = Field(alias="technologyReadinessLevel", ge=1, le=9, description="Technology Readiness Level (TRL 1-9) of this method")
    equipment_required: List[str] = Field(None, alias="equipmentRequired", description="Equipment needed to implement this method")
    location_suitability: List[str] = Field(alias="locationSuitability", description="Locations where this method can be effectively used")
    average_confidence: float = Field(alias="averageConfidence", ge=0, le=100, description="Average confidence score achieved by this method")
    implementation_cost: IdentificationMethodImplementationcost = Field(alias="implementationCost", description="Relative cost of implementing this method")
    scalability_factor: IdentificationMethodScalabilityfactor = Field(alias="scalabilityFactor", description="Scale at which this method can be effectively applied")
    regulatory_acceptance: List[str] = Field(alias="regulatoryAcceptance", description="Regulatory frameworks that accept this method")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of the most recent data update")



class LcfsPathwayPathwaytype(str, Enum):
    """Enumeration values for pathwayType in LcfsPathway."""
    LOOKUP_TABLE = "Lookup_Table"
    TIER_1 = "Tier_1"
    TIER_2 = "Tier_2"

class LcfsPathwayFeedstockcategory(str, Enum):
    """Enumeration values for feedstockCategory in LcfsPathway."""
    CORN = "corn"
    SUGARCANE = "sugarcane"
    FOREST_RESIDUE = "forest_residue"
    AGRICULTURAL_RESIDUE = "agricultural_residue"
    LOGGING_AND_MILL_RESIDUE = "logging_and_mill_residue"
    GRASS_RESIDUE_WASTE = "grass_residue_waste"
    FOREST_HARVEST_RESIDUE = "forest_harvest_residue"
    URBAN_WOOD_WASTE = "urban_wood_waste"
    DEDICATED_ENERGY_CROPS = "dedicated_energy_crops"
    ALGAE = "algae"
    USED_COOKING_OIL = "used_cooking_oil"
    ANIMAL_FATS = "animal_fats"
    OTHER_WASTE_OILS = "other_waste_oils"

class LcfsPathwayFuelproduct(str, Enum):
    """Enumeration values for fuelProduct in LcfsPathway."""
    ETHANOL = "ethanol"
    RENEWABLE_DIESEL = "renewable_diesel"
    BIODIESEL = "biodiesel"
    SUSTAINABLE_AVIATION_FUEL = "sustainable_aviation_fuel"
    RENEWABLE_GASOLINE = "renewable_gasoline"
    HYDROGEN = "hydrogen"
    RENEWABLE_NATURAL_GAS = "renewable_natural_gas"
    ELECTRICITY = "electricity"

class LcfsPathwayVerificationstatus(str, Enum):
    """Enumeration values for verificationStatus in LcfsPathway."""
    ACTIVE = "active"
    SUSPENDED = "suspended"
    EXPIRED = "expired"
    PENDING_RENEWAL = "pending_renewal"

class LcfsPathwayGeographicscope(str, Enum):
    """Enumeration values for geographicScope in LcfsPathway."""
    CALIFORNIA = "California"
    WESTERN_US = "Western_US"
    NATIONAL = "National"
    INTERNATIONAL = "International"

class LcfsPathway(BOOSTBaseModel):
    """
    LcfsPathway entity model for BOOST standard.
    
    CARB-certified fuel pathway for LCFS compliance with carbon intensity and regulatory attributes
    """
    
    pathway_id: str = Field(alias="pathwayId", pattern=r"^CA-[A-Z]{2,4}-[0-9]{4}-[A-Z]{3,4}-[0-9]{3}$", description="CARB-assigned pathway identifier")
    pathway_type: LcfsPathwayPathwaytype = Field(alias="pathwayType", description="CARB pathway certification tier")
    feedstock_category: LcfsPathwayFeedstockcategory = Field(alias="feedstockCategory", description="Primary feedstock type for pathway")
    fuel_product: LcfsPathwayFuelproduct = Field(alias="fuelProduct", description="Final fuel product produced")
    facility_location: str = Field(alias="facilityLocation", description="Production facility location (city, state or geographic region)")
    carbon_intensity: float = Field(alias="carbonIntensity", ge=0, le=200, description="Certified carbon intensity in gCO2e/MJ")
    energy_economy_ratio: float = Field(alias="energyEconomyRatio", ge=0.5, le=3.0, description="Energy economy ratio multiplier for credit calculation")
    certification_date: datetime = Field(alias="certificationDate", description="CARB pathway certification date")
    expiration_date: datetime = Field(None, alias="expirationDate", description="Pathway certification expiration date")
    verification_status: LcfsPathwayVerificationstatus = Field(alias="verificationStatus", description="Current CARB verification status")
    ca_greet_version: str = Field(alias="caGreetVersion", pattern=r"^[0-9]+\\.[0-9]+$", description="CA-GREET model version used for pathway certification")
    facility_capacity: float = Field(None, alias="facilityCapacity", ge=0, description="Annual production capacity in gallons")
    process_description: str = Field(None, alias="processDescription", description="Brief description of production process")
    geographic_scope: LcfsPathwayGeographicscope = Field(None, alias="geographicScope", description="Geographic applicability of pathway")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of most recent pathway data update")



class LcfsReportingCompliancestatus(str, Enum):
    """Enumeration values for complianceStatus in LcfsReporting."""
    COMPLIANT = "compliant"
    DEFICIT = "deficit"
    PENDING = "pending"
    UNDER_REVIEW = "under_review"

class LcfsReporting(BOOSTBaseModel):
    """
    LcfsReporting entity model for BOOST standard.
    
    Quarterly LCFS compliance report for regulated entities with credit calculations and submission tracking
    """
    
    reporting_id: str = Field(alias="reportingId", pattern=r"^LCFS-RPT-[0-9]{4}-Q[1-4]-[A-Z0-9]{3,8}$", description="Unique identifier for the quarterly report")
    regulated_entity_id: str = Field(alias="regulatedEntityId", pattern=r"^ORG-[A-Z0-9-_]+$", description="Reference to regulated Organization entity")
    reporting_period: str = Field(alias="reportingPeriod", pattern=r"^[0-9]{4}-Q[1-4]$", description="Reporting quarter in YYYY-QN format")
    total_fuel_volume: float = Field(alias="totalFuelVolume", ge=0, description="Total fuel volume reported in gallons")
    total_credits_generated: float = Field(alias="totalCreditsGenerated", ge=0, description="Total LCFS credits generated in the reporting period")
    total_deficits_incurred: float = Field(alias="totalDeficitsIncurred", ge=0, description="Total LCFS deficits incurred in the reporting period")
    net_position: float = Field(alias="netPosition", description="Net credit/deficit position (credits - deficits)")
    compliance_status: LcfsReportingCompliancestatus = Field(alias="complianceStatus", description="Overall compliance status for the reporting period")
    submission_date: datetime = Field(None, alias="submissionDate", description="Date and time report was submitted to CARB")
    verification_date: datetime = Field(None, alias="verificationDate", description="Date of third-party verification completion")
    verification_required: bool = Field(None, alias="verificationRequired", description="Whether third-party verification is required for this entity")
    verification_statement_id: str = Field(None, alias="VerificationStatementId", pattern=r"^VS-[A-Z0-9-_]+$", description="Uses EntityNameId convention referencing VerificationStatement for third-party verification")
    reporting_deadline: datetime = Field(None, alias="reportingDeadline", description="CARB deadline for report submission")
    transaction_ids: List[str] = Field(None, alias="transactionIds", description="Array of Transaction entity IDs included in this report")
    pathway_summary: List[Dict[str, Any]] = Field(None, alias="pathwaySummary", description="Summary of activity by LCFS pathway")
    calculation_parameters: Dict[str, Any] = Field(None, alias="calculationParameters", description="Calculation parameters used for credit computation")
    compliance_metrics: Dict[str, Any] = Field(None, alias="complianceMetrics", description="Additional compliance and environmental impact metrics")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of most recent report update")



class LocationHistoryLocationeventtype(str, Enum):
    """Enumeration values for locationEventType in LocationHistory."""
    ARRIVAL = "arrival"
    DEPARTURE = "departure"
    PROCESSING = "processing"
    STORAGE = "storage"
    MEASUREMENT = "measurement"

class LocationHistoryTransportmethod(str, Enum):
    """Enumeration values for transportMethod in LocationHistory."""
    TRUCK = "truck"
    RAIL = "rail"
    SHIP = "ship"
    CONVEYOR = "conveyor"
    MANUAL = "manual"

class LocationHistory(BOOSTBaseModel):
    """
    LocationHistory entity model for BOOST standard.
    
    Historical movement records of TRUs
    """
    
    location_history_id: str = Field(alias="locationHistoryId", pattern=r"^LH-[A-Z0-9-_]+$")
    traceable_unit_id: str = Field(alias="traceableUnitId", pattern=r"^TRU-[A-Z0-9-_]+$")
    geographic_data_id: str = Field(alias="geographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$")
    timestamp: datetime = ...
    location_event_type: LocationHistoryLocationeventtype = Field(alias="locationEventType")
    material_processing_id: Any = Field(None, alias="materialProcessingId", pattern=r"^MP-[A-Z0-9-_]+$")
    operator_id: str = Field(None, alias="operatorId", pattern=r"^OP-[A-Z0-9-_]+$")
    equipment_used: str = Field(None, alias="equipmentUsed")
    notes: str = None
    distance_traveled: float = Field(None, alias="distanceTraveled", ge=0)
    transport_method: LocationHistoryTransportmethod = Field(None, alias="transportMethod")
    is_current_location: bool = Field(alias="isCurrentLocation")
    verification_methods: List[str] = Field(None, alias="verificationMethods")
    last_updated: datetime = Field(None, alias="lastUpdated")



class MassBalanceAccount(BOOSTBaseModel):
    """
    MassBalanceAccount entity model for BOOST standard.
    
    MassBalanceAccount entity in BOOST data model
    """
    
    account_id: str = Field(alias="accountId", pattern=r"^MBA-[A-Z0-9-_]+$")
    organization_id: str = Field(alias="organizationId", pattern=r"^ORG-[A-Z0-9-_]+$")
    product_group_id: str = Field(alias="productGroupId", pattern=r"^PG-[A-Z0-9-_]+$")
    period_inputs: float = Field(None, alias="periodInputs")
    period_outputs: float = Field(None, alias="periodOutputs")
    current_balance: float = Field(alias="currentBalance")
    balancing_period: str = Field(None, alias="balancingPeriod")
    conversion_factors: float = Field(None, alias="conversionFactors")



class MaterialMaterialcategory(str, Enum):
    """Enumeration values for materialCategory in Material."""
    SOFTWOOD = "softwood"
    HARDWOOD = "hardwood"
    MIXED = "mixed"

class Material(BOOSTBaseModel):
    """
    Material entity model for BOOST standard.
    
    Material types and specifications
    """
    
    material_type_id: str = Field(alias="materialTypeId", pattern=r"^MAT-[A-Z0-9-_]+$")
    material_name: str = Field(alias="materialName")
    material_category: MaterialMaterialcategory = Field(alias="materialCategory")
    default_assortment_types: str = Field(None, alias="defaultAssortmentTypes")
    standard_quality_grades: str = Field(None, alias="standardQualityGrades")
    carbon_storage_rate: str = Field(None, alias="carbonStorageRate")
    density: str = None
    applicable_processing_types: List[str] = Field(None, alias="applicableProcessingTypes")
    typical_species: List[str] = Field(None, alias="typicalSpecies")
    standard_moisture_content: str = Field(None, alias="standardMoistureContent")
    energy_content: str = Field(None, alias="energyContent")
    applicable_plant_parts: List[str] = Field(None, alias="applicablePlantParts", description="Plant parts included in this material type")
    excluded_plant_parts: List[str] = Field(None, alias="excludedPlantParts", description="Plant parts excluded from this material type")
    plant_part_processing_specs: Dict[str, Any] = Field(None, alias="plantPartProcessingSpecs", description="Processing specifications by plant part")
    last_updated: datetime = Field(None, alias="lastUpdated")



class MeasurementRecordMeasurementmethod(str, Enum):
    """Enumeration values for measurementMethod in MeasurementRecord."""
    HARVESTER = "harvester"
    MILL = "mill"
    MANUAL = "manual"
    OPTICAL = "optical"

class MeasurementRecordMoisturemethod(str, Enum):
    """Enumeration values for moistureMethod in MeasurementRecord."""
    OVEN_DRY = "oven_dry"
    ELECTRICAL_RESISTANCE = "electrical_resistance"
    MICROWAVE = "microwave"
    NEAR_INFRARED = "near_infrared"
    GRAVIMETRIC = "gravimetric"
    CAPACITIVE = "capacitive"
    CALCULATED = "calculated"
    ESTIMATED = "estimated"

class MeasurementRecordMoisturestandard(str, Enum):
    """Enumeration values for moistureStandard in MeasurementRecord."""
    ASTM_D4442 = "ASTM_D4442"
    ASTM_D2016 = "ASTM_D2016"
    ISO_13061 = "ISO_13061"
    CEN_EN_14774 = "CEN_EN_14774"
    LOCAL_STANDARD = "local_standard"

class MeasurementRecord(BOOSTBaseModel):
    """
    MeasurementRecord entity model for BOOST standard.
    
    Quality measurements and dimensional data
    """
    
    record_id: str = Field(alias="recordId", pattern=r"^MR-[A-Z0-9-_]+$")
    traceable_unit_id: str = Field(alias="traceableUnitId", pattern=r"^TRU-[A-Z0-9-_]+$")
    measured_volume: float = Field(None, alias="measuredVolume", ge=0)
    measured_length: float = Field(None, alias="measuredLength", ge=0)
    measured_diameter: float = Field(None, alias="measuredDiameter", ge=0)
    measurement_method: MeasurementRecordMeasurementmethod = Field(alias="measurementMethod")
    measurement_geographic_data_id: str = Field(None, alias="measurementGeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$")
    measurement_timestamp: datetime = Field(alias="measurementTimestamp")
    operator_id: str = Field(None, alias="operatorId", pattern=r"^OP-[A-Z0-9-_]+$")
    tracking_point_id: str = Field(None, alias="trackingPointId", pattern=r"^TP-[A-Z0-9-_]+$")
    species_measurements: List[str] = Field(None, alias="speciesMeasurements")
    moisture_content: float = Field(None, alias="moistureContent", ge=0, le=100, description="Moisture content as percentage of weight contributed by water (0-100%)")
    moisture_method: MeasurementRecordMoisturemethod = Field(None, alias="moistureMethod", description="Method used to determine moisture content")
    moisture_standard: MeasurementRecordMoisturestandard = Field(None, alias="moistureStandard", description="Standard procedure followed for moisture measurement")
    moisture_accuracy: float = Field(None, alias="moistureAccuracy", ge=0, description="Estimated accuracy of moisture measurement (± percentage points)")
    last_updated: datetime = Field(None, alias="lastUpdated")



class MoistureContent(BOOSTBaseModel):
    """
    MoistureContent entity model for BOOST standard.
    
    Comprehensive validation rules and business logic for moisture content tracking across the BOOST data standard
    """
    
    moisture_content_id: str = Field(alias="moistureContentId", pattern=r"^MOI-[A-Z0-9-_]+$", description="Unique identifier for moisture content record")
    moisture_content: str = Field(alias="moistureContent")
    measurement_method: str = Field(alias="measurementMethod")
    quality_assurance: str = Field(None, alias="qualityAssurance")



class OperatorOperatortype(str, Enum):
    """Enumeration values for operatorType in Operator."""
    HARVESTER_OPERATOR = "harvester_operator"
    MILL_OPERATOR = "mill_operator"
    TRANSPORT_DRIVER = "transport_driver"
    QUALITY_INSPECTOR = "quality_inspector"
    PROCESSING_TECHNICIAN = "processing_technician"
    EQUIPMENT_MAINTENANCE = "equipment_maintenance"
    LOADING_OPERATOR = "loading_operator"
    SCALING_SPECIALIST = "scaling_specialist"
    ENVIRONMENTAL_MONITOR = "environmental_monitor"
    SAFETY_COORDINATOR = "safety_coordinator"

class Operator(BOOSTBaseModel):
    """
    Operator entity model for BOOST standard.
    
    Validation schema for personnel and operator management within the BOOST biomass chain of custody system
    """
    
    operator_id: str = Field(alias="operatorId", pattern=r"^OP-[A-Z0-9-_]+$", description="Unique identifier for the operator (Primary Key)")
    organization_id: str = Field(alias="organizationId", pattern=r"^ORG-[A-Z0-9-_]+$", description="Employing organization - uses EntityNameId convention referencing Organization")
    operator_name: str = Field(alias="operatorName", min_length=2, max_length=100, description="Full name of the operator")
    employee_id: Any = Field(None, alias="employeeId", description="Internal employee identification number")
    operator_type: OperatorOperatortype = Field(alias="operatorType", description="Type/role of operator within the supply chain")
    certifications: List[str] = Field(None, description="Array of certifications held by the operator")
    equipment_authorizations: List[str] = Field(None, alias="equipmentAuthorizations", description="Equipment the operator is authorized to operate")
    contact_info: Any = Field(None, alias="contactInfo", description="Phone/email contact information")
    is_active: bool = Field(alias="isActive", description="Current employment status - true if actively employed")
    hire_date: datetime = Field(alias="hireDate", description="Date when operator started employment")
    skills_qualifications: List[str] = Field(None, alias="skillsQualifications", description="Relevant skills and qualifications")
    supervisor_operator_id: Any = Field(None, alias="supervisorOperatorId", pattern=r"^OP-[A-Z0-9-_]+$", description="Foreign key reference to direct supervisor operator (optional)")
    last_updated: datetime = Field(alias="lastUpdated", description="Timestamp of last record modification")



class ProcessingHistoryProcessingeventtype(str, Enum):
    """Enumeration values for processingEventType in ProcessingHistory."""
    TRANSFORMATION = "transformation"
    SPLIT = "split"
    MERGE = "merge"
    QUALITY_CHANGE = "quality_change"
    LOADING = "loading"
    TRANSPORT_PROCESSING = "transport_processing"
    MEASUREMENT = "measurement"

class ProcessingHistorySpeciescompositionchange(str, Enum):
    """Enumeration values for speciesCompositionChange in ProcessingHistory."""
    UNCHANGED = "unchanged"
    SEPARATED = "separated"
    MIXED = "mixed"
    FILTERED = "filtered"
    TRANSFORMED = "transformed"

class ProcessingHistory(BOOSTBaseModel):
    """
    ProcessingHistory entity model for BOOST standard.
    
    Complete timeline of processing events with moisture tracking
    """
    
    processing_history_id: str = Field(alias="processingHistoryId", pattern=r"^PH-[A-Z0-9-_]+$", description="Unique identifier for the processing history record")
    traceable_unit_id: str = Field(alias="traceableUnitId", pattern=r"^TRU-[A-Z0-9-_]+$", description="Foreign key to TRU this history record belongs to")
    material_processing_id: str = Field(alias="materialProcessingId", pattern=r"^MP-[A-Z0-9-_]+$", description="Foreign key to MaterialProcessing operation")
    timestamp: datetime = Field(description="When this processing step occurred")
    process_sequence_number: int = Field(alias="processSequenceNumber", ge=1, description="Sequential order of this processing step for the TRU")
    processing_event_type: ProcessingHistoryProcessingeventtype = Field(alias="processingEventType", description="Type of processing event")
    input_tru_ids: List[str] = Field(alias="inputTRUIds", description="Array of input TRU IDs (multiple for merge operations)")
    output_tru_ids: List[str] = Field(alias="outputTRUIds", description="Array of output TRU IDs (multiple for split operations)")
    processing_duration: str = Field(None, alias="processingDuration", pattern=r"^P(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?:\\d+H)?(?:\\d+M)?(?:\\d+(?:\\.\\d+)?S)?)?$", description="ISO 8601 duration format for processing time")
    quality_change_description: str = Field(None, alias="qualityChangeDescription", description="Description of quality changes during processing")
    operator_id: str = Field(None, alias="operatorId", pattern=r"^OP-[A-Z0-9-_]+$", description="Foreign key to operator who performed processing")
    equipment_used: str = Field(None, alias="equipmentUsed", description="Equipment used for this processing step")
    volume_change_ratio: float = Field(None, alias="volumeChangeRatio", ge=0, le=2.0, description="Ratio of output volume to input volume (1.0 = no change)")
    species_composition_change: ProcessingHistorySpeciescompositionchange = Field(None, alias="speciesCompositionChange", description="How species composition changed during processing")
    plant_part_transformation: str = Field(None, alias="plantPartTransformation", description="Summary of plant part changes during processing")
    is_current_processing_state: bool = Field(None, alias="isCurrentProcessingState", description="True if this represents the current processing state")
    processing_geographic_data_id: str = Field(None, alias="processingGeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Foreign key to location where processing occurred")
    previous_processing_history_id: Any = Field(None, alias="previousProcessingHistoryId", pattern=r"^PH-[A-Z0-9-_]+$", description="Foreign key to previous processing history record (forms chain)")
    next_processing_history_ids: List[str] = Field(None, alias="nextProcessingHistoryIds", description="Array of next processing history record IDs (for split operations)")
    volume_conservation_data: Dict[str, Any] = Field(None, alias="volumeConservationData", description="Volume conservation validation data")
    media_break_data: Dict[str, Any] = Field(None, alias="mediaBreakData", description="Media break detection and recovery information")
    claim_inheritance_data: Dict[str, Any] = Field(None, alias="claimInheritanceData", description="Sustainability claim inheritance tracking")



class ProductGroupProductcategory(str, Enum):
    """Enumeration values for productCategory in ProductGroup."""
    SOLID_BIOMASS = "solid_biomass"
    LIQUID_BIOFUEL = "liquid_biofuel"
    BIOGAS = "biogas"

class ProductGroup(BOOSTBaseModel):
    """
    ProductGroup entity model for BOOST standard.
    
    ProductGroup entity in BOOST data model
    """
    
    product_group_id: str = Field(alias="productGroupId", pattern=r"^PG-[A-Z0-9-_]+$")
    product_group_name: str = Field(alias="productGroupName")
    product_category: ProductGroupProductcategory = Field(alias="productCategory")
    classification: str = None
    description: str = ...
    typical_uses: List[str] = Field(None, alias="typicalUses")
    quality_standards: List[str] = Field(None, alias="qualityStandards")
    certification_requirements: List[str] = Field(None, alias="certificationRequirements")
    regulatory_classification: str = Field(None, alias="regulatoryClassification")
    last_updated: datetime = Field(None, alias="lastUpdated")
    related_materials: List[Dict[str, Any]] = Field(None, alias="relatedMaterials")



class SalesDeliveryDocument(BOOSTBaseModel):
    """
    SalesDeliveryDocument entity model for BOOST standard.
    
    SalesDeliveryDocument entity in BOOST data model
    """
    
    document_id: str = Field(alias="documentId", pattern=r"^DOC-[A-Z0-9-_]+$")
    date_issued: datetime = Field(alias="dateIssued")
    buyer_name: str = Field(alias="buyerName")
    buyer_address: str = Field(None, alias="buyerAddress")
    seller_name: str = Field(alias="sellerName")
    seller_address: str = Field(None, alias="sellerAddress")
    product_description: str = Field(alias="productDescription")
    quantity: float = ...
    transaction_id: str = Field(None, alias="transactionId")
    certificate_code: str = Field(None, alias="certificateCode")
    transport_reference: str = Field(None, alias="transportReference")



class SpeciesComponentHarvestingmethod(str, Enum):
    """Enumeration values for harvestingMethod in SpeciesComponent."""
    CHAINSAW = "chainsaw"
    HARVESTER = "harvester"
    MANUAL = "manual"
    MECHANICAL = "mechanical"

class SpeciesComponentPrimaryplantpart(str, Enum):
    """Enumeration values for primaryPlantPart in SpeciesComponent."""
    TRUNK = "trunk"
    BRANCHES = "branches"
    TWIGS = "twigs"
    BARK = "bark"
    HEARTWOOD = "heartwood"
    SAPWOOD = "sapwood"
    LEAVES = "leaves"
    NEEDLES = "needles"
    SEEDS = "seeds"
    NUTS = "nuts"
    CONES = "cones"
    STALKS = "stalks"
    STRAW = "straw"
    HUSKS = "husks"
    HULLS = "hulls"
    CHAFF = "chaff"
    STUBBLE = "stubble"

class SpeciesComponentStructuralclassification(str, Enum):
    """Enumeration values for structuralClassification in SpeciesComponent."""
    STRUCTURAL = "structural"
    PROTECTIVE = "protective"
    METABOLIC = "metabolic"
    REPRODUCTIVE = "reproductive"
    STORAGE = "storage"

class SpeciesComponent(BOOSTBaseModel):
    """
    SpeciesComponent entity model for BOOST standard.
    
    Species composition within TRUs
    """
    
    component_id: str = Field(alias="componentId", pattern=r"^SC-[A-Z0-9-_]+$", description="Unique identifier for the species component")
    traceable_unit_id: str = Field(alias="traceableUnitId", pattern=r"^TRU-[A-Z0-9-_]+$", description="Foreign key back reference to TraceableUnit")
    species: str = Field(description="Species name (common or scientific)")
    volume_m3: float = Field(alias="volumeM3", ge=0, description="Volume of this species within the TRU in cubic meters")
    percentage_by_volume: float = Field(alias="percentageByVolume", ge=0, le=100, description="Percentage of total TRU volume for this species")
    quality_grade: str = Field(None, alias="qualityGrade", description="Species-specific quality grade")
    source_geographic_data_id: str = Field(None, alias="sourceGeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Foreign key to geographic origin of this species")
    harvesting_method: SpeciesComponentHarvestingmethod = Field(None, alias="harvestingMethod", description="Method used to harvest this species")
    harvest_timestamp: datetime = Field(None, alias="harvestTimestamp", description="When this species was harvested")
    carbon_storage: str = Field(None, alias="carbonStorage", description="CO2 data for this species component")
    scientific_name: str = Field(None, alias="scientificName", description="Scientific/Latin name of the species")
    dbh_cm: float = Field(None, alias="dbhCm", ge=0, description="Diameter at breast height in centimeters")
    height_m: float = Field(None, alias="heightM", ge=0, description="Average tree height in meters")
    age_years: int = Field(None, alias="ageYears", ge=0, description="Estimated age in years")
    moisture_content: float = Field(None, alias="moistureContent", ge=0, le=100, description="Moisture content as percentage")
    defects: List[str] = Field(None, description="List of defects or quality issues")
    plant_part_composition: Dict[str, Any] = Field(None, alias="plantPartComposition", description="Plant part breakdown within this species component")
    primary_plant_part: SpeciesComponentPrimaryplantpart = Field(None, alias="primaryPlantPart", description="Primary plant part represented by this species component")
    structural_classification: SpeciesComponentStructuralclassification = Field(None, alias="structuralClassification", description="Functional classification of the primary plant part")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of the most recent data update")



class Supplier(BOOSTBaseModel):
    """
    Supplier entity model for BOOST standard.
    
    Supplier entity in BOOST data model
    """
    
    supplier_id: str = Field(alias="supplierId", pattern=r"^SUP-[A-Z0-9-_]+$")
    supplier_name: str = Field(alias="supplierName")
    address: str = None
    certificate_code: str = Field(None, alias="certificateCode")
    claim: str = None
    supplier_type: str = Field(None, alias="supplierType")
    geographic_data_id: str = Field(None, alias="GeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Supplier location - uses EntityNameId convention referencing GeographicData")



class SupplyBase(BOOSTBaseModel):
    """
    SupplyBase entity model for BOOST standard.
    
    SupplyBase entity in BOOST data model. Infrastructure data (roads) and entity relationships (equipment, TRUs) are maintained via proper foreign keys rather than redundant arrays, following normalization principles.
    """
    
    supply_base_id: str = Field(alias="supplyBaseId", pattern=r"^SB-[A-Z0-9-_]+$")
    organization_id: str = Field(alias="OrganizationId", pattern=r"^ORG-[A-Z0-9-_]+$", description="Managing organization - uses EntityNameId convention referencing Organization")
    supply_base_name: str = Field(alias="supplyBaseName")
    description: str = ...
    harvest_sites: List[str] = Field(None, alias="harvestSites")
    species_available: List[str] = Field(None, alias="speciesAvailable")
    geographic_data_id: str = Field(None, alias="GeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Supply base location - uses EntityNameId convention referencing GeographicData")



class SupplyBaseReport(BOOSTBaseModel):
    """
    SupplyBaseReport entity model for BOOST standard.
    
    SupplyBaseReport entity in BOOST data model
    """
    
    sbr_id: str = Field(alias="sbrId", pattern=r"^SBR-[A-Z0-9-_]+$")
    organization_id: str = Field(alias="organizationId")
    preparation_date: datetime = Field(alias="preparationDate")
    supply_base_summary: str = Field(None, alias="supplyBaseSummary")
    sourcing_practices: str = Field(None, alias="sourcingPractices")
    sustainability_measures: str = Field(None, alias="sustainabilityMeasures")
    publication_url: str = Field(None, alias="publicationUrl")
    report_geographic_data_id: str = Field(None, alias="reportGeographicDataId")
    supply_base_ids: List[str] = Field(None, alias="supplyBaseIds", description="Array of SupplyBase IDs that this report covers")



class TrackingPointPointtype(str, Enum):
    """Enumeration values for pointType in TrackingPoint."""
    HARVEST_SITE = "harvest_site"
    SKID_ROAD = "skid_road"
    FOREST_ROAD = "forest_road"
    MILL_ENTRANCE = "mill_entrance"

class TrackingPoint(BOOSTBaseModel):
    """
    TrackingPoint entity model for BOOST standard.
    
    TrackingPoint entity in BOOST data model
    """
    
    tracking_point_id: str = Field(alias="trackingPointId", pattern=r"^TP-[A-Z0-9-_]+$", min_length=5, max_length=50, description="Unique identifier for the tracking point")
    point_type: TrackingPointPointtype = Field(alias="pointType")
    geographic_data_id: str = Field(alias="geographicDataId")
    equipment_used: str = Field(alias="equipmentUsed")
    operator_id: str = Field(None, alias="operatorId")
    established_timestamp: datetime = Field(alias="establishedTimestamp")



class TransactionBatchQuantityunit(str, Enum):
    """Enumeration values for quantityUnit in TransactionBatch."""
    CUBIC_METERS = "cubic_meters"
    METRIC_TONS = "metric_tons"
    BOARD_FEET = "board_feet"
    CORD = "cord"
    STERE = "stere"
    GREEN_TONS = "green_tons"
    DRY_TONS = "dry_tons"

class TransactionBatchQualitygrade(str, Enum):
    """Enumeration values for qualityGrade in TransactionBatch."""
    GRADE_A = "Grade_A"
    GRADE_B = "Grade_B"
    GRADE_C = "Grade_C"
    STRUCTURAL = "Structural"
    FUEL = "Fuel"
    PULPWOOD = "Pulpwood"
    SAWLOG = "Sawlog"
    VENEER = "Veneer"
    MIXED = "Mixed"

class TransactionBatchReconciliationstatus(str, Enum):
    """Enumeration values for reconciliationStatus in TransactionBatch."""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    RESOLVED = "resolved"
    DISPUTED = "disputed"
    ESCALATED = "escalated"

class TransactionBatchBatchstatus(str, Enum):
    """Enumeration values for batchStatus in TransactionBatch."""
    PREPARED = "prepared"
    IN_TRANSIT = "in_transit"
    DELIVERED = "delivered"
    ACCEPTED = "accepted"
    REJECTED = "rejected"
    PARTIALLY_DELIVERED = "partially_delivered"

class TransactionBatch(BOOSTBaseModel):
    """
    TransactionBatch entity model for BOOST standard.
    
    TransactionBatch entity in BOOST data model
    """
    
    transaction_batch_id: str = Field(alias="transactionBatchId", pattern=r"^TB-[A-Z0-9-_]+$", description="Unique identifier for the physical material batch")
    transaction_id: str = Field(alias="transactionId", pattern=r"^TXN-[A-Z0-9-_]+$", description="Foreign key to parent business transaction")
    production_batch_id: Any = Field(None, alias="productionBatchId", pattern=r"^TB-[A-Z0-9-_]+$", description="Foreign key to source production batch")
    quantity: float = Field(ge=0, description="Physical quantity of material in this batch")
    quantity_unit: TransactionBatchQuantityunit = Field(alias="quantityUnit", description="Unit of measurement for quantity")
    traceable_unit_ids: List[str] = Field(alias="traceableUnitIds", description="Array of TRU IDs included in this batch")
    claim_id: Any = Field(None, alias="claimId", pattern=r"^CLA-[A-Z0-9-_]+$", description="Foreign key to primary sustainability claim")
    additional_claim_ids: List[str] = Field(None, alias="additionalClaimIds", description="Array of secondary claim IDs")
    species_composition: List[Dict[str, Any]] = Field(None, alias="speciesComposition", description="Species breakdown with percentages")
    quality_grade: TransactionBatchQualitygrade = Field(None, alias="qualityGrade", description="Overall quality grade for the batch")
    processing_history_ids: List[str] = Field(None, alias="processingHistoryIds", description="Array of processing history record IDs")
    reconciliation_status: TransactionBatchReconciliationstatus = Field(None, alias="reconciliationStatus", description="Status of volume/quality reconciliation")
    tracking_history: str = Field(None, alias="trackingHistory", description="Complete location trail summary")
    measurement_record_ids: List[str] = Field(None, alias="measurementRecordIds", description="Array of measurement record IDs")
    media_break_detected: bool = Field(None, alias="mediaBreakDetected", description="Flag indicating if traceability continuity was broken")
    batch_status: TransactionBatchBatchstatus = Field(alias="batchStatus", description="Current status of the physical batch")
    batch_created_date: datetime = Field(None, alias="batchCreatedDate", description="When the batch was prepared/created")
    delivery_date: Any = Field(None, alias="deliveryDate", description="Actual delivery timestamp")
    delivery_geographic_data_id: Any = Field(None, alias="deliveryGeographicDataId", pattern=r"^GEO-[A-Z0-9-_]+$", description="Foreign key to delivery location")
    quality_metrics: Dict[str, Any] = Field(None, alias="qualityMetrics", description="Detailed quality assessment metrics")
    plant_part_composition: Dict[str, Any] = Field(None, alias="plantPartComposition", description="Plant part composition breakdown")
    transportation_data: Dict[str, Any] = Field(None, alias="transportationData", description="Transportation and logistics information")
    certification_validation: Dict[str, Any] = Field(None, alias="certificationValidation", description="Certification and compliance validation data")
    last_updated: datetime = Field(None, alias="lastUpdated", description="Timestamp of last modification")



class VerificationStatement(BOOSTBaseModel):
    """
    VerificationStatement entity model for BOOST standard.
    
    VerificationStatement entity in BOOST data model
    """
    
    statement_id: str = Field(alias="statementId", pattern=r"^VS-[A-Z0-9-_]+$")
    verification_date: datetime = Field(alias="verificationDate")
    issuing_body: str = Field(alias="issuingBody")
    scope: str = None
    transaction_batch_id: str = Field(None, alias="transactionBatchId")

